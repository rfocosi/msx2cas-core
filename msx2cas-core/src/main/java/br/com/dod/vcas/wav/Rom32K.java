package br.com.dod.vcas.wav;

import br.com.dod.dotnet.types.DWORD;
import br.com.dod.vcas.exception.FlowException;
import br.com.dod.vcas.model.SampleRate;

public class Rom32K extends Rom {

    private static final long MAX_ENC_INPUTFILE_LENGTH = 32768L;

    private char[] loader32K1;

    private char[] loader32K2;

    public Rom32K(String inputFileName, SampleRate sampleRate) throws FlowException {
        super(inputFileName, sampleRate);
    }

    @Override
    protected void validate() throws FlowException {
        if (this.fileLength < MIN_ENC_INPUTFILE_LENGTH || this.fileLength > MAX_ENC_INPUTFILE_LENGTH) throw FlowException.error("file_size_invalid");
    }

    @Override
    protected void setup() {

        initLoader();

        setExtraBytes();

        setMoreExtraBytes();

        String fileLoaderId = getFileId().trim();
        nameBuffer = new String[2];
        int fileLoaderIdCutSize = (fileLoaderId.length() >= CAS_FILENAME_LENGTH ? CAS_FILENAME_LENGTH - 1 : fileLoaderId.length());
        nameBuffer[0] = String.format("%1$-" + CAS_FILENAME_LENGTH + "s", fileLoaderId.substring(0, fileLoaderIdCutSize) +"1");
        nameBuffer[1] = String.format("%1$-" + CAS_FILENAME_LENGTH + "s", fileLoaderId.substring(0, fileLoaderIdCutSize) +"2");

        if (nameBuffer.length > 1) {
            char[] nameCharArray = nameBuffer[1].trim().toCharArray();
            System.arraycopy(nameCharArray, 0, loader32K1, 21, nameCharArray.length);
        }
    }

    private char getRomTypeHeader() throws FlowException {
        char ch = (char) inputMemPointer[3];
        if ((ch & 0xf0) >= 0xD0) throw FlowException.error("type_32k_not_supported");
        return ch;
    }

    private void setExtraBytes() {

        DWORD extraBytes = new DWORD(6);

        extraBytes = new DWORD((extraBytes.longValue() + loader32K1.length + loader32K2.length + 12));

        this.extraBytes = extraBytes;
    }
    private void setMoreExtraBytes() {

        DWORD moreExtraBytes = new DWORD(((wavSampleRate * FIRST_PAUSE_LENGTH) + (wavSampleRate * DEFAULT_PAUSE_LENGTH) +
                Math.round(wavSampleRate * LONG_HEADER_LENGTH + wavSampleRate * SHORT_HEADER_LENGTH) +
                (fileHeader.length + CAS_FILENAME_LENGTH) * Math.round(sampleScale * SIZE_OF_BITSTREAM * bitEncodingLength)));

        moreExtraBytes = new DWORD((moreExtraBytes.longValue() + (wavSampleRate * FIRST_PAUSE_LENGTH) + (wavSampleRate * DEFAULT_PAUSE_LENGTH) +
                Math.round(wavSampleRate * LONG_HEADER_LENGTH + wavSampleRate * SHORT_HEADER_LENGTH) +
                (fileHeader.length + CAS_FILENAME_LENGTH - new DWORD(0).longValue()) * Math.round(sampleScale * SIZE_OF_BITSTREAM * bitEncodingLength)));

        this.moreExtraBytes = moreExtraBytes;
    }

    @Override
    protected void encodeFileContent() throws FlowException {

        char headId = getRomTypeHeader();

        if (headId > 0x80) headId = 0x40;
        else if (headId < 0x40) headId = 0;

        encodeRomBlock(headId, 0, 16384, loader32K1);

        encodePause(FIRST_PAUSE_LENGTH);

        encodeLongHeader();

        // Encode binary header and second part of 32k ROM name
        encodeData(fileHeader);
        encodeData(nameBuffer[1].toCharArray());

        encodePause(DEFAULT_PAUSE_LENGTH);

        encodeRomBlock(headId, 16384, inputMemPointer.length, loader32K2);
    }

    private void initLoader() {
        this.loader32K1 = new char[]{
                0xC3, 0x76, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x62, 0x6C,
                0x6F, 0x61, 0x64, 0x22, 0x63, 0x61, 0x73, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x22, 0x2C, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0D,
                0x00, 0x3C, 0x20, 0x4D, 0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20,
                0x4C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2C,
                0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x2E, 0x2E, 0x2E, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x00, 0x3C, 0x20, 0x4D, 0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E,
                0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x3A, 0x20, 0x43, 0x52, 0x43, 0x20,
                0x45, 0x52, 0x52, 0x4F, 0x52, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x00, 0xF3, 0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0xE5,
                0xC1, 0x21, 0x7A, 0x91, 0xAF, 0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79, 0xB7,
                0xC2, 0x88, 0x90, 0x78, 0xB7, 0xC2, 0x88, 0x90, 0xF1, 0x47, 0x21, 0x09, 0x90,
                0x7E, 0xB8, 0xCA, 0xE2, 0x90, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9,
                0xF3, 0x77, 0x3E, 0x08, 0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD,
                0xC3, 0x00, 0xCD, 0xCF, 0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x50,
                0x90, 0x1A, 0xB7, 0xCA, 0xD4, 0x90, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6,
                0x00, 0xC3, 0xC4, 0x90, 0x21, 0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00,
                0xCD, 0x56, 0x01, 0xFB, 0xC9, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9,
                0xF3, 0x77, 0x3E, 0x04, 0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD,
                0xC3, 0x00, 0xCD, 0xCC, 0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x28,
                0x90, 0x1A, 0xB7, 0xCA, 0x15, 0x91, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6,
                0x00, 0xC3, 0x05, 0x91, 0x21, 0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0x56, 0x01,
                0xF3, 0x21, 0xF0, 0xFB, 0x22, 0xF8, 0xF3, 0x22, 0xFA, 0xF3, 0x21, 0x0A, 0x90,
                0x11, 0xF0, 0xFB, 0x01, 0x1D, 0x00, 0xED, 0xB0, 0x21, 0x0D, 0xFC, 0x22, 0xF8,
                0xF3, 0xF3, 0x3A, 0xFF, 0xFF, 0x2F, 0xF5, 0x4F, 0xE6, 0xF0, 0x47, 0x79, 0x0F,
                0x0F, 0x0F, 0x0F, 0xE6, 0x0F, 0xB0, 0x32, 0xFF, 0xFF, 0xDB, 0xA8, 0xF5, 0xE6,
                0xF0, 0x47, 0x0F, 0x0F, 0x0F, 0x0F, 0xB0, 0xD3, 0xA8, 0x2A, 0x03, 0x90, 0xED,
                0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0x44, 0x4D, 0x21, 0x7A, 0x91, 0xED, 0x5B,
                0x03, 0x90, 0xED, 0xB0, 0xF1, 0xD3, 0xA8, 0xF1, 0x32, 0xFF, 0xFF, 0xFB, 0xC9,
                0x00
        };

        this.loader32K2 = new char[]{
                0xC3, 0x30, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x20, 0x4D,
                0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20, 0x4C, 0x6F, 0x61, 0x64,
                0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2C, 0x20, 0x77, 0x61, 0x69,
                0x74, 0X20, 0x2E, 0x2E, 0x2E, 0x20, 0x20, 0x20, 0x00, 0xF3, 0x2A, 0x03, 0x90,
                0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0xE5, 0xC1, 0x21, 0xFE, 0x90, 0xAF,
                0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79, 0xB7, 0xC2, 0x42, 0x90, 0x78, 0xB7,
                0xC2, 0x42, 0x90, 0xF1, 0x47, 0x21, 0x09, 0x90, 0x7E, 0xB8, 0xCA, 0x9C, 0x90,
                0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9, 0xF3, 0x77, 0x3E, 0x08, 0x23,
                0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD, 0xC3, 0x00, 0xCD, 0xCF, 0x00,
                0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x0A, 0x90, 0x1A, 0xB7, 0xCA, 0x8E,
                0x90, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6, 0x00, 0xC3, 0x7E, 0x90, 0x21,
                0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00, 0xCD, 0x56, 0x01, 0xFB, 0xC9,
                0x3A, 0xFF, 0xFF, 0x2F, 0xF5, 0x4F, 0xE6, 0xF0, 0x47, 0x79, 0x0F, 0x0F, 0x0F,
                0x0F, 0xE6, 0x0F, 0xB0, 0x32, 0xFF, 0xFF, 0xDB, 0xA8, 0xF5, 0xE6, 0xF0, 0x47,
                0x0F, 0x0F, 0x0F, 0x0F, 0xB0, 0xD3, 0xA8, 0x2A, 0x03, 0x90, 0x7C, 0xE6, 0xF0,
                0xFE, 0x80, 0xC2, 0xDD, 0x90, 0x21, 0xDD, 0x90, 0x11, 0xFF, 0x90, 0xEB, 0xED,
                0x52, 0x44, 0x4D, 0x21, 0xDD, 0x90, 0x11, 0x60, 0xF5, 0xD5, 0xED, 0xB0, 0xC9,
                0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0x44, 0x4D, 0x21,
                0xFE, 0x90, 0xED, 0x5B, 0x03, 0x90, 0xED, 0xB0, 0xF1, 0xD3, 0xA8, 0xF1, 0x32,
                0xFF, 0xFF, 0xF7, 0x00, 0x00, 0x00, 0x00
        };
    }
}
