package br.com.dod.vcas.wav;

import br.com.dod.vcas.exception.FlowException;
import br.com.dod.vcas.model.FileType;
import br.com.dod.vcas.model.SampleRate;
import br.com.dod.vcas.util.FileCommons;

public class Rom extends Wav {

    static final long MAX_ENC_INPUT_FILE_LENGTH = 16384;

    protected boolean reset;

    public Rom(String inputFileName, SampleRate sampleRate) throws FlowException {
        super(inputFileName, sampleRate);
        validate();
    }

    public static Rom build(String inputFileName, SampleRate sampleRate) throws FlowException {

        long fileSize = FileCommons.readFile(inputFileName).length;

        if (Rom.matchSize(fileSize)) {
            return new Rom(inputFileName, sampleRate);
        } else if (Rom32K.matchSize(fileSize)) {
            return new Rom32K(inputFileName, sampleRate);
        } else if (Rom49K.matchSize(fileSize)) {
            return new Rom49K(inputFileName, sampleRate);
        }

        throw FlowException.error("file_size_invalid");
    }

    public Wav convert(boolean reset) throws FlowException {
        this.reset = reset;
        return super.convert();
    }

    static boolean matchSize(final long fileSize) {
        return (fileSize > MIN_ENC_INPUT_FILE_LENGTH && fileSize <= MAX_ENC_INPUT_FILE_LENGTH);
    }

    protected void validate() throws FlowException {
        if (!matchSize(getFileSize())) throw FlowException.error("file_size_invalid");
    }

    private char getRomTypeHeader() throws FlowException {
        char ch = (char) inputMemPointer[3];
        if ((ch & 0xf0) >= 0xD0) throw FlowException.error("type_32k_not_supported");
        return ch;
    }

    @Override
    protected void encodeFileContent() throws FlowException {

        int blockSize = inputMemPointer.length;

        char headId = getRomTypeHeader();

        encodePause(FIRST_PAUSE_LENGTH);

        encodeLongHeader();

        encodeData(FileType.ROM.getHeader());
        encodeData(getNameBuffer());

        encodePause(DEFAULT_PAUSE_LENGTH);

        if (headId < 0x80) {
            encodeRomBlock(headId, 0, blockSize, getLoader());
        } else {
            encodeShortHeader();

            char[] addressBuffer = new char[6];

            // Encode 6 bytes of addresses
            char a = (char) ((headId & 0xf0) << 8);
            addressBuffer[0] = 0;
            addressBuffer[1] = (char)(a >> 8);
            a = (char) (a + blockSize - 1);
            addressBuffer[2] = a;
            addressBuffer[3] = (char)(a >> 8);
            addressBuffer[4] = (char)inputMemPointer[2];
            addressBuffer[5] = (char)inputMemPointer[3];

            encodeData(addressBuffer);

            for (byte b : inputMemPointer) {
                writeDataByte((char) b);
            }
        }
    }

    void encodeRomBlock(char headId, int blockStart, int blockEnd, char[] loader) throws FlowException {
        char romCRC = calculateCRC(blockStart, blockEnd);

        encodeShortHeader();

        encodeData(buildBinaryAddressBuffer(sizeof(loader) + blockEnd - blockStart));

        char a = (char) ((headId & 0xf0) << 8);
        a = (char) (a  + blockStart);
        loader[3] = 0;
        loader[4] = (char)(a >> 8);
        a = (char) (a + blockEnd - blockStart);
        loader[5] = a;
        loader[6] = (char)(a >> 8);
        if ((char) inputMemPointer[0] == 'A' && (char) inputMemPointer[1] == 'B')
        {
            loader[7] = (char) inputMemPointer[2];
            loader[8] = (char) inputMemPointer[3];
        }
		else if ((char) inputMemPointer[0x4000] == 'A' && (char) inputMemPointer[0x4001] == 'B')
        {
            loader[7] = (char) inputMemPointer[0x4002];
            loader[8] = (char) inputMemPointer[0x4003];
        }
        loader[9] = romCRC;

        encodeData(loader);

        for (int i = blockStart; i < blockEnd; i++)	{
            writeDataByte((char) inputMemPointer[i]);	// Encode data byte
        }
    }

    private char[] getLoader() {
        return reset ? loaderRst() : loader();
    }

    private char[] loaderRst() {
        return new char[]{
                0xC3, 0x27, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x20, 0x4D,
                0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20, 0x46, 0x61, 0x69, 0x6C,
                0x3A, 0x20, 0x43, 0x52, 0x43, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x21, 0x00,
                0xF3, 0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0x37, 0x3F, 0xED, 0x52,
                0xE5, 0xC1, 0x21, 0x04, 0x91, 0xAF, 0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79,
                0xB7, 0x20, 0xF7, 0x78, 0xB7, 0x20, 0xF3, 0xF1, 0x47, 0x21, 0x09, 0x90, 0x7E,
                0xB8, 0xCA, 0x91, 0x90, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9, 0xF3,
                0x77, 0x3E, 0x08, 0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD, 0xC3,
                0x00, 0xCD, 0xCF, 0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x0A, 0x90,
                0x1A, 0xB7, 0x28, 0x0A, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6, 0x00, 0x18,
                0xF2, 0x21, 0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00, 0xCD, 0x56, 0x01,
                0xFB, 0xC9, 0xF3, 0x3A, 0xFF, 0xFF, 0x2F, 0xE6, 0xF0, 0x4F, 0x0F, 0x0F, 0x0F,
                0x0F, 0xE6, 0x0F, 0xB1, 0x32, 0xFF, 0xFF, 0xDB, 0xA8, 0xE6, 0xF0, 0x47, 0x0F,
                0x0F, 0x0F, 0x0F, 0xE6, 0x0F, 0xB0, 0xF5, 0xD3, 0xA8, 0x2A, 0x03, 0x90, 0x7C,
                0xFE, 0x40, 0x38, 0x04, 0xFE, 0x80, 0x38, 0x28, 0x21, 0x00, 0x40, 0x3E, 0x41,
                0x77, 0x3C, 0x23, 0x77, 0x23, 0xED, 0x5B, 0x07, 0x90, 0x73, 0x23, 0x72, 0x21,
                0xE6, 0x90, 0x11, 0x05, 0x91, 0xEB, 0x37, 0x3F, 0xED, 0x52, 0x44, 0x4D, 0x21,
                0xE6, 0x90, 0x11, 0x60, 0xF5, 0xD5, 0xED, 0xB0, 0xC9, 0x2A, 0x03, 0x90, 0xED,
                0x5B, 0x05, 0x90, 0xEB, 0x37, 0x3F, 0xED, 0x52, 0x44, 0x4D, 0x21, 0x04, 0x91,
                0xED, 0xB0, 0xF1, 0xE6, 0xFC, 0xD3, 0xA8, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00
        };
    }

    private char[] loader() {
        return new char[]{
                0xC3, 0x27, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x20, 0x4D,
                0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20, 0x46, 0x61, 0x69, 0x6C,
                0x3A, 0x20, 0x43, 0x52, 0x43, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x21, 0x00,
                0xF3, 0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0x37, 0x3F, 0xED, 0x52,
                0xE5, 0xC1, 0x21, 0xF9, 0x90, 0xAF, 0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79,
                0xB7, 0x20, 0xF7, 0x78, 0xB7, 0x20, 0xF3, 0xF1, 0x47, 0x21, 0x09, 0x90, 0x7E,
                0xB8, 0xCA, 0x91, 0x90, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9, 0xF3,
                0x77, 0x3E, 0x08, 0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD, 0xC3,
                0x00, 0xCD, 0xCF, 0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x0A, 0x90,
                0x1A, 0xB7, 0x28, 0x0A, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6, 0x00, 0x18,
                0xF2, 0x21, 0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00, 0xCD, 0x56, 0x01,
                0xFB, 0xC9, 0xF3, 0x3A, 0xFF, 0xFF, 0x2F, 0xE6, 0xF0, 0x4F, 0x0F, 0x0F, 0x0F,
                0x0F, 0xE6, 0x0F, 0xB1, 0x32, 0xFF, 0xFF, 0xDB, 0xA8, 0xE6, 0xF0, 0x47, 0x0F,
                0x0F, 0x0F, 0x0F, 0xE6, 0x0F, 0xB0, 0xF5, 0xD3, 0xA8, 0x2A, 0x03, 0x90, 0x7A,
                0xFE, 0x80, 0x38, 0x17, 0x21, 0xD1, 0x90, 0x11, 0xFA, 0x90, 0xEB, 0x37, 0x3F,
                0xED, 0x52, 0x44, 0x4D, 0x21, 0xD1, 0x90, 0x11, 0x60, 0xF5, 0xD5, 0xED, 0xB0,
                0xC9, 0x2A, 0x07, 0x90, 0xE5, 0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB,
                0x37, 0x3F, 0xED, 0x52, 0x44, 0x4D, 0x21, 0xF9, 0x90, 0xED, 0xB0, 0xE1, 0x7C,
                0xFE, 0x40, 0x38, 0x07, 0xF1, 0xE6, 0xFC, 0xD3, 0xA8, 0xFB, 0xE9, 0xF1, 0xFB,
                0xE9, 0x00
        };
    }

    protected char[] getLoaderBlock() {
        return new char[] {
                0xC3, 0x5B, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x62, 0x6C,
                0x6F, 0x61, 0x64, 0x22, 0x63, 0x61, 0x73, 0x3A, 0x22, 0x2C, 0x72, 0x0D, 0x00,
                0x3C, 0x20, 0x4D, 0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20, 0x4C,
                0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x2C, 0x20, 0x70, 0x6C, 0x65, 0x61, 0x73,
                0x65, 0x20, 0x77, 0x61, 0x69, 0x74, 0x2E, 0x2E, 0x2E, 0x00, 0x3C, 0x20, 0x4D,
                0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20, 0x46, 0x61, 0x69, 0x6C,
                0x3A, 0x20, 0x43, 0x52, 0x43, 0x20, 0x45, 0x52, 0x52, 0x4F, 0x52, 0x21, 0x00,
                0xF3, 0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0x37, 0x3F, 0xED, 0x52,
                0xE5, 0xC1, 0x21, 0x5E, 0x91, 0xAF, 0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79,
                0xB7, 0x20, 0xF7, 0x78, 0xB7, 0x20, 0xF3, 0xF1, 0x47, 0x21, 0x09, 0x90, 0x7E,
                0xB8, 0xCA, 0xC4, 0x90, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9, 0xF3,
                0x77, 0x3E, 0x08, 0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD, 0xC3,
                0x00, 0xCD, 0xCF, 0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x3E, 0x90,
                0x1A, 0xB7, 0x28, 0x0A, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6, 0x00, 0x18,
                0xF2, 0x21, 0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00, 0xCD, 0x56, 0x01,
                0xC9, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9, 0xF3, 0x77, 0x3E, 0x04,
                0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD, 0xC3, 0x00, 0xCD, 0xCC,
                0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x1A, 0x90, 0x1A, 0xB7, 0x28,
                0x0A, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6, 0x00, 0x18, 0xF2, 0x21, 0x03,
                0x01, 0xCD, 0xC6, 0x00, 0xCD, 0x56, 0x01, 0xF3, 0x21, 0xF0, 0xFB, 0x22, 0xF8,
                0xF3, 0x22, 0xFA, 0xF3, 0x21, 0x0A, 0x90, 0x11, 0xF0, 0xFB, 0x01, 0x1D, 0x00,
                0xED, 0xB0, 0x21, 0x0D, 0xFC, 0x22, 0xF8, 0xF3, 0xF3, 0x3A, 0xFF, 0xFF, 0x2F,
                0xF5, 0x4F, 0xE6, 0xF0, 0x47, 0x79, 0x0F, 0x0F, 0x0F, 0x0F, 0xE6, 0x0F, 0xB0,
                0x32, 0xFF, 0xFF, 0xDB, 0xA8, 0xF5, 0xE6, 0xF0, 0x47, 0x0F, 0x0F, 0x0F, 0x0F,
                0xE6, 0x0F, 0xB0, 0xD3, 0xA8, 0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB,
                0x37, 0x3F, 0xED, 0x52, 0x44, 0x4D, 0x21, 0x5E, 0x91, 0xED, 0x5B, 0x03, 0x90,
                0xED, 0xB0, 0xF1, 0xD3, 0xA8, 0xF1, 0x32, 0xFF, 0xFF, 0xFB, 0xC9, 0x00
        };
    }
}
