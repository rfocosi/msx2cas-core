package br.com.dod.vcas.wav;

import br.com.dod.dotnet.types.DWORD;
import br.com.dod.vcas.exception.FlowException;
import br.com.dod.vcas.model.SampleRate;

public class Rom extends Wav {

	private static final char[] romFileHeader = {0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0};

	private char[] loader;

	private char[] loader32K1;

	private char[] loader32K2;

	public Rom(String inputFileName, SampleRate sampleRate) throws FlowException {
		super(inputFileName, sampleRate, new DWORD(0), romFileHeader);
	}

	@Override
	protected void validate() throws FlowException {
		if (this.fileLength < MIN_ENC_INPUTFILE_LENGTH || this.fileLength > MAX_ENC_INPUTFILE_LENGTH) throw FlowException.error("file_size_invalid");
	}

	@Override
	protected void setup() throws FlowException {

		initLoader();

		setExtraBytes();

		setMoreExtraBytes();
		
		if (!is24KBMax()) {
			String fileLoaderId = getFileId().trim();
			nameBuffer = new String[2];
			int fileLoaderIdCutSize = (fileLoaderId.length() >= CAS_FILENAME_LENGTH ? CAS_FILENAME_LENGTH - 1 : fileLoaderId.length());
			nameBuffer[0] = String.format("%1$-" + CAS_FILENAME_LENGTH + "s", fileLoaderId.substring(0, fileLoaderIdCutSize) +"1");
			nameBuffer[1] = String.format("%1$-" + CAS_FILENAME_LENGTH + "s", fileLoaderId.substring(0, fileLoaderIdCutSize) +"2");
		}
		
		if (nameBuffer.length > 1) {
			char[] nameCharArray = nameBuffer[1].trim().toCharArray();
			System.arraycopy(nameCharArray, 0, loader32K1, 21, nameCharArray.length);
		}
	}

	private char getRomTypeHeader() throws FlowException {
		char ch = (char) inputMemPointer[3];
		if ((ch & 0xf0) >= 0xD0) throw FlowException.error("type_32k_not_supported");
		return ch;
	}

	private boolean is24KBMax(){
		return this.fileLength < 25000;
	}
	
	private void setExtraBytes() throws FlowException {

		DWORD extraBytes = new DWORD(6);

		if (is24KBMax()) {
			if (getRomTypeHeader() < 0x80) {
				extraBytes = new DWORD((extraBytes.longValue() + loader.length + 6));
			} else {
				extraBytes = new DWORD((extraBytes.longValue() + 6));
			}
		} else {
			extraBytes = new DWORD((extraBytes.longValue() + loader32K1.length + loader32K2.length + 12));
		}
		this.extraBytes = extraBytes;
	}

	private void setMoreExtraBytes() {

		DWORD moreExtraBytes = new DWORD(((wavSampleRate * FIRST_PAUSE_LENGTH) + (wavSampleRate * DEFAULT_PAUSE_LENGTH) +
				Math.round(wavSampleRate * LONG_HEADER_LENGTH + wavSampleRate * SHORT_HEADER_LENGTH) +
				(fileHeader.length + CAS_FILENAME_LENGTH) * Math.round(sampleScale * SIZE_OF_BITSTREAM * bitEncodingLength)));

		if (!is24KBMax()) {
			moreExtraBytes = new DWORD((moreExtraBytes.longValue() + (wavSampleRate * FIRST_PAUSE_LENGTH) + (wavSampleRate * DEFAULT_PAUSE_LENGTH) +
					Math.round(wavSampleRate * LONG_HEADER_LENGTH + wavSampleRate * SHORT_HEADER_LENGTH) +
					(fileHeader.length + CAS_FILENAME_LENGTH - new DWORD(0).longValue()) * Math.round(sampleScale * SIZE_OF_BITSTREAM * bitEncodingLength)));
		}
		this.moreExtraBytes = moreExtraBytes;
	}

	@Override
	protected void encodeFileContent() throws FlowException {

		char headId = getRomTypeHeader();
		if (is24KBMax()) {
			encodeRom(inputMemPointer.length, headId);
		} else {
			if (headId > 0x80) headId = 0x40;
			else if (headId < 0x40) headId = 0;			
			encode32KRom(headId);
		}
	}

	private void encodeRom(final int blockSize, final char headId) {

		// Calculate CRC of the whole ROM
		char romCRC = 0;
		for (int i = 0; i < blockSize; i++) romCRC += (char) inputMemPointer[i];

		encodeShortHeader();

		char[] addressBuffer = new char[6];

		if (headId < 0x80) {
			char a = (char) (sizeof(loader) + blockSize + 0x9000 - 1);
			// Set binary start addresses
			addressBuffer[0] = 0;
			addressBuffer[1] = 0x90;
			addressBuffer[2] = a;
			addressBuffer[3] = (char)(a >> 8);
			addressBuffer[4] = 0;
			addressBuffer[5] = 0x90;

			encodeData(addressBuffer);

			// Set ROM loader addresses
			a = (char) ((headId & 0xf0) << 8);
			loader[3] = 0;
			loader[4] = (char)(a >> 8);
			a = (char) (a + blockSize);
			loader[5] = a;
			loader[6] = (char)(a >> 8);
			loader[7] = (char) inputMemPointer[2];
			loader[8] = (char) inputMemPointer[3];
			loader[9] = romCRC;

			encodeData(loader);

		} else {
			// Encode 6 bytes of addresses			
			char a = (char) ((headId & 0xf0) << 8);
			addressBuffer[0] = 0;
			addressBuffer[1] = (char)(a >> 8);
			a = (char) (a + blockSize - 1);
			addressBuffer[2] = a;
			addressBuffer[3] = (char)(a >> 8);
			addressBuffer[4] = (char)inputMemPointer[2];
			addressBuffer[5] = (char)inputMemPointer[3];

			encodeData(addressBuffer);
		}

		// Encode whole ROM data
		for (int i = 0; i < blockSize; i++)	{
			writeDataByte((char) inputMemPointer[i]);
		}
	}

	private void encode32KRom(char headId) {
		// Calculate CRC of the first half of ROM
		char romCRC = 0;
		for (int i = 0; i < 16384; i++) {
			romCRC = (char) (romCRC + inputMemPointer[i]);
		}

		encodeShortHeader();

		char[] addressBuffer = new char[6];

		char a = (char) (sizeof(loader32K1) + 16384 + 0x9000 - 1);
		addressBuffer[0] = 0;
		addressBuffer[1] = 0x90;
		addressBuffer[2] = a;
		addressBuffer[3] = (char)(a >> 8);
		addressBuffer[4] = 0;
		addressBuffer[5] = 0x90;

		encodeData(addressBuffer);

		a = (char) ((headId & 0xf0) << 8);
		loader32K1[3] = 0;
		loader32K1[4] = (char)(a >> 8);
		a = (char) (a + 16384);
		loader32K1[5] = a;
		loader32K1[6] = (char)(a >> 8);
		loader32K1[7] = (char)inputMemPointer[2];
		loader32K1[8] = (char)inputMemPointer[3];
		loader32K1[9] = romCRC;

		// Encode first binary 32k ROM loader
		encodeData(loader32K1);

		// Encode half of 32k ROM data
		for (int i = fileOffset.intValue(); i < 16384; i++)	{
			writeDataByte((char) inputMemPointer[i]);	// Encode data byte
		}

		encodePause(FIRST_PAUSE_LENGTH);

		// Calculate CRC of second half of ROM
		romCRC = 0;
		for (int i = 16384; i < inputMemPointer.length; i++) {
			romCRC = (char) (romCRC + inputMemPointer[i]);
		}

		encodeLongHeader();

		// Encode binary header and second part of 32k ROM name
		encodeData(fileHeader);
		encodeData(nameBuffer[1].toCharArray());

		encodePause(DEFAULT_PAUSE_LENGTH);

		encodeShortHeader();
		
		if (inputMemPointer[3] > 0x80) {
			headId = 0x40;
		} else if (inputMemPointer[3] < 0x40) {
			headId = 0;
		}

		// Set binary start addresses
		a = (char) (sizeof(loader32K2) + inputMemPointer.length - 16384 + 0x9000 - 1);
		addressBuffer[0] = 0;
		addressBuffer[1] = 0x90;
		addressBuffer[2] = a;
		addressBuffer[3] = (char)(a >> 8);
		addressBuffer[4] = 0;
		addressBuffer[5] = 0x90;

		// Encode 6 bytes of addresses
		encodeData(addressBuffer);

		// Set ROM loader addresses
		a = (char) ((headId & 0xf0) << 8);
		a = (char) (a  + 16384);
		loader32K2[3] = 0;
		loader32K2[4] = (char)(a >> 8);
		a = (char) (a + inputMemPointer.length - 16384);
		loader32K2[5] = a;
		loader32K2[6] = (char)(a >> 8);
		loader32K2[7] = (char)inputMemPointer[2];
		loader32K2[8] = (char)inputMemPointer[3];
		loader32K2[9] = romCRC;

		encodeData(loader32K2);

		// Encode second half of 32k ROM data
		for (int i = fileOffset.intValue() + 16384; i < inputMemPointer.length; i++) {
			writeDataByte((char)inputMemPointer[i]);
		}
	}

	private void initLoader() {

		this.loader = new char[]{
				0xC3, 0x30, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x20, 0x4D,
				0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20, 0x4C, 0x6F, 0x61, 0x64,
				0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2C, 0x20, 0x77, 0x61, 0x69,
				0x74, 0X20, 0x2E, 0x2E, 0x2E, 0x20, 0x20, 0x20, 0x00, 0xF3, 0x2A, 0x03, 0x90,
				0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0xE5, 0xC1, 0x21, 0xE3, 0x90, 0xAF,
				0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79, 0xB7, 0xC2, 0x42, 0x90, 0x78, 0xB7,
				0xC2, 0x42, 0x90, 0xF1, 0x47, 0x21, 0x09, 0x90, 0x7E, 0xB8, 0xCA, 0x9C, 0x90,
				0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9, 0xF3, 0x77, 0x3E, 0x08, 0x23,
				0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD, 0xC3, 0x00, 0xCD, 0xCF, 0x00,
				0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x0A, 0x90, 0x1A, 0xB7, 0xCA, 0x8E,
				0x90, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6, 0x00, 0xC3, 0x7E, 0x90, 0x21,
				0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00, 0xCD, 0x56, 0x01, 0xFB, 0xC9,
				0xF3, 0x2A, 0x07, 0x90, 0xE5, 0x7C, 0xE6, 0xC0, 0x11, 0x00, 0x00, 0x21, 0x0F,
				0xF0, 0x28, 0x06, 0x11, 0x00, 0x40, 0x21, 0x0C, 0xF3, 0x3A, 0xFF, 0xFF, 0x2F,
				0xA4, 0x4F, 0x0F, 0x0F, 0x0F, 0x0F, 0xA5, 0xB1, 0x32, 0xFF, 0xFF, 0xDB, 0xA8,
				0xA4, 0x47, 0x0F, 0x0F, 0x0F, 0x0F, 0xA5, 0xB0, 0xD3, 0xA8, 0xD5, 0x2A, 0x03,
				0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0x44, 0x4D, 0x21, 0xE3, 0x90,
				0xD1, 0xED, 0xB0, 0xFB, 0xC9, 0x00
			};

		this.loader32K1 = new char[]{
				0xC3, 0x76, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x62, 0x6C,
				0x6F, 0x61, 0x64, 0x22, 0x63, 0x61, 0x73, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x22, 0x2C, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0D,
				0x00, 0x3C, 0x20, 0x4D, 0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20,
				0x4C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2C,
				0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x2E, 0x2E, 0x2E, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x00, 0x3C, 0x20, 0x4D, 0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E,
				0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 0x3A, 0x20, 0x43, 0x52, 0x43, 0x20,
				0x45, 0x52, 0x52, 0x4F, 0x52, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x00, 0xF3, 0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0xE5,
				0xC1, 0x21, 0x7A, 0x91, 0xAF, 0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79, 0xB7,
				0xC2, 0x88, 0x90, 0x78, 0xB7, 0xC2, 0x88, 0x90, 0xF1, 0x47, 0x21, 0x09, 0x90,
				0x7E, 0xB8, 0xCA, 0xE2, 0x90, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9,
				0xF3, 0x77, 0x3E, 0x08, 0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD,
				0xC3, 0x00, 0xCD, 0xCF, 0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x50,
				0x90, 0x1A, 0xB7, 0xCA, 0xD4, 0x90, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6,
				0x00, 0xC3, 0xC4, 0x90, 0x21, 0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00,
				0xCD, 0x56, 0x01, 0xFB, 0xC9, 0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9,
				0xF3, 0x77, 0x3E, 0x04, 0x23, 0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD,
				0xC3, 0x00, 0xCD, 0xCC, 0x00, 0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x28,
				0x90, 0x1A, 0xB7, 0xCA, 0x15, 0x91, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6,
				0x00, 0xC3, 0x05, 0x91, 0x21, 0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0x56, 0x01,
				0xF3, 0x21, 0xF0, 0xFB, 0x22, 0xF8, 0xF3, 0x22, 0xFA, 0xF3, 0x21, 0x0A, 0x90,
				0x11, 0xF0, 0xFB, 0x01, 0x1D, 0x00, 0xED, 0xB0, 0x21, 0x0D, 0xFC, 0x22, 0xF8,
				0xF3, 0xF3, 0x3A, 0xFF, 0xFF, 0x2F, 0xF5, 0x4F, 0xE6, 0xF0, 0x47, 0x79, 0x0F,
				0x0F, 0x0F, 0x0F, 0xE6, 0x0F, 0xB0, 0x32, 0xFF, 0xFF, 0xDB, 0xA8, 0xF5, 0xE6,
				0xF0, 0x47, 0x0F, 0x0F, 0x0F, 0x0F, 0xB0, 0xD3, 0xA8, 0x2A, 0x03, 0x90, 0xED,
				0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0x44, 0x4D, 0x21, 0x7A, 0x91, 0xED, 0x5B,
				0x03, 0x90, 0xED, 0xB0, 0xF1, 0xD3, 0xA8, 0xF1, 0x32, 0xFF, 0xFF, 0xFB, 0xC9,
				0x00
			};

		this.loader32K2 = new char[]{
				0xC3, 0x30, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x20, 0x4D,
				0x53, 0x58, 0x32, 0x43, 0x61, 0x73, 0x20, 0x3E, 0x20, 0x4C, 0x6F, 0x61, 0x64,
				0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2C, 0x20, 0x77, 0x61, 0x69,
				0x74, 0X20, 0x2E, 0x2E, 0x2E, 0x20, 0x20, 0x20, 0x00, 0xF3, 0x2A, 0x03, 0x90,
				0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0xE5, 0xC1, 0x21, 0xFE, 0x90, 0xAF,
				0xF5, 0xF1, 0x86, 0x23, 0x0B, 0xF5, 0x79, 0xB7, 0xC2, 0x42, 0x90, 0x78, 0xB7,
				0xC2, 0x42, 0x90, 0xF1, 0x47, 0x21, 0x09, 0x90, 0x7E, 0xB8, 0xCA, 0x9C, 0x90,
				0xFB, 0xCD, 0x6C, 0x00, 0x3E, 0x0F, 0x21, 0xE9, 0xF3, 0x77, 0x3E, 0x08, 0x23,
				0x77, 0x23, 0x77, 0xCD, 0x62, 0x00, 0xAF, 0xCD, 0xC3, 0x00, 0xCD, 0xCF, 0x00,
				0x21, 0x01, 0x01, 0xCD, 0xC6, 0x00, 0x11, 0x0A, 0x90, 0x1A, 0xB7, 0xCA, 0x8E,
				0x90, 0x13, 0xCD, 0xA2, 0x00, 0x24, 0xCD, 0xC6, 0x00, 0xC3, 0x7E, 0x90, 0x21,
				0x03, 0x01, 0xCD, 0xC6, 0x00, 0xCD, 0xC0, 0x00, 0xCD, 0x56, 0x01, 0xFB, 0xC9,
				0x3A, 0xFF, 0xFF, 0x2F, 0xF5, 0x4F, 0xE6, 0xF0, 0x47, 0x79, 0x0F, 0x0F, 0x0F,
				0x0F, 0xE6, 0x0F, 0xB0, 0x32, 0xFF, 0xFF, 0xDB, 0xA8, 0xF5, 0xE6, 0xF0, 0x47,
				0x0F, 0x0F, 0x0F, 0x0F, 0xB0, 0xD3, 0xA8, 0x2A, 0x03, 0x90, 0x7C, 0xE6, 0xF0,
				0xFE, 0x80, 0xC2, 0xDD, 0x90, 0x21, 0xDD, 0x90, 0x11, 0xFF, 0x90, 0xEB, 0xED,
				0x52, 0x44, 0x4D, 0x21, 0xDD, 0x90, 0x11, 0x60, 0xF5, 0xD5, 0xED, 0xB0, 0xC9,
				0x2A, 0x03, 0x90, 0xED, 0x5B, 0x05, 0x90, 0xEB, 0xED, 0x52, 0x44, 0x4D, 0x21,
				0xFE, 0x90, 0xED, 0x5B, 0x03, 0x90, 0xED, 0xB0, 0xF1, 0xD3, 0xA8, 0xF1, 0x32,
				0xFF, 0xFF, 0xF7, 0x00, 0x00, 0x00, 0x00
			};
	}


	
}
